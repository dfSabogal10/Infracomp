package conexion;

import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.sql.Date;
import java.util.Properties;
import java.io.*;
import java.sql.*;
import java.util.*;

import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.Queue;
import javax.jms.QueueConnection;
import javax.jms.QueueConnectionFactory;
import javax.jms.QueueReceiver;
import javax.jms.QueueSession;
import javax.jms.TextMessage;
import javax.naming.Context;
import javax.naming.InitialContext;



public class consultaDAO implements MessageListener
{

	//----------------------------------------------------
	//Constantes
	//----------------------------------------------------
	/**
	 * ruta donde se encuentra el archivo de conexión.
	 */
	private static final String ARCHIVO_CONEXION = "data/conexion.properties";

	private static final String ARCHIVO = "./data/log.txt";

	/**
	 * nombre de la tabla videos
	 */
	private static final String tablaBancos = "BANCOS";


	/**
	 * nombre de la columna titulo_original en la tabla videos.
	 */
	private static final String nombreBanco = "NOMBRE";



	//----------------------------------------------------
	//Consultas
	//----------------------------------------------------

	/**
	 * Consulta que devuelve isan, titulo, y año de los videos en orden alfabetico
	 */
	private static final String consultaBancos="SELECT *, FROM "+ tablaBancos;


	//----------------------------------------------------
	//Atributos
	//----------------------------------------------------
	/**
	 * conexion con la base de datos
	 */
	public Connection conexion;


	private static String usuario = "ISIS2304091510";
	private static String password = "ncullbuilt";
	private static String url = "jdbc:oracle:thin:@prod.oracle.virtual.uniandes.edu.co:1531:prod";


	Savepoint primero = null;
	Savepoint segundo = null;
	Savepoint tercero = null;

	private Destination d;

	private mensajesDAO msg;
	private InitialContext ictx;
	
	public File archivo;

	public boolean sirvio;
	
	
	public String etapa;
	
	
	
	public void mensaje(String sirve)
	{
	    
	    try
	    {
			System.out.print("Envio");

			msg.send(sirve);


		}
	    catch (Exception e)
	    {
			// TODO Auto-generated catch block
	System.out.println("Error" + e.getMessage());	
	}
	    
	}
		
	
	
	/**
	 * constructor de la clase. No inicializa ningun atributo.
	 */
	public consultaDAO() 
	{		

	}

	// -------------------------------------------------
	// Métodos
	// -------------------------------------------------

	
	public void inicializarMensajes()
	{
		
		 try {
				final Properties env = new Properties();
			    env.put("org.jboss.ejb.client.scoped.context", true);
	            env.put(Context.URL_PKG_PREFIXES, "org.jboss.ejb.client.naming");
	            env.put("endpoint.name", "endpoint-client"); 
	            
	            ictx = new InitialContext(env);

	            Object tmp = ictx.lookup("ConnectionFactory");
	            QueueConnectionFactory qcf = (QueueConnectionFactory) tmp;
				Queue queue2 = ( Queue )ictx.lookup( "queue/test" );
				QueueConnection queueConnection2 = qcf.createQueueConnection( );
				QueueSession queueSession2 = queueConnection2.createQueueSession( false, QueueSession.AUTO_ACKNOWLEDGE);
				QueueReceiver queueReceiver2 = queueSession2.createReceiver( queue2 );
				queueReceiver2.setMessageListener( this );
				 msg = new mensajesDAO();
				
				
				queueConnection2.start( );
			
				
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
	
	
	/**
	 * obtiene ls datos necesarios para establecer una conexion
	 * Los datos se obtienen a partir de un archivo properties.
	 * @param path ruta donde se encuentra el archivo properties.
	 */
	public void inicializar()
	{
		try
		{
			final String driver = "oracle.jdbc.driver.OracleDriver";
			Class.forName(driver);
			

		}
		catch(Exception e)
		{
			e.printStackTrace();
		}	

	}

	/**
	 * Método que se encarga de crear la conexión con el Driver Manager
	 * a partir de los parametros recibidos.
	 * @param url direccion url de la base de datos a la cual se desea conectar
	 * @param usuario nombre del usuario que se va a conectar a la base de datos
	 * @param clave clave de acceso a la base de datos
	 * @throws SQLException si ocurre un error generando la conexión con la base de datos.
	 */
	private void establecerConexion( ) throws SQLException
	{
		try
		{
			conexion = DriverManager.getConnection(url,usuario,password);
		}
		catch( SQLException exception )
		{
			throw new SQLException( "ERROR: ConsultaDAO obteniendo una conexi—n." );
		}
	}

	/**
	 *Cierra la conexión activa a la base de datos. Además, con=null.
	 * @param con objeto de conexión a la base de datos
	 * @throws SistemaCinesException Si se presentan errores de conexión
	 */
	public void closeConnection(Connection connection) throws Exception {        
		try {
			connection.close();
			connection = null;
		} catch (SQLException exception) {
			throw new Exception("ERROR: ConsultaDAO: closeConnection() = cerrando una conexión.");
		}
	}



	@Override
	public void onMessage(Message arg0) {
		// TODO Auto-generated method stub
		
	} 

}
